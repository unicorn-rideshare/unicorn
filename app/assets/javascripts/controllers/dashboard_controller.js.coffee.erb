module = angular.module('unicornApp.controllers')

module.controller 'DashboardCtrl', [
  '$scope', '$filter', '$location', '$routeParams',  '$controller', '$modal', 'Company', 'Market', 'Origin', 'Provider', 'ProviderOriginAssignment', 'Route', 'WorkOrder', 'preferences', 'companyPreference', 'websocket', 'flashService',
  ($scope, $filter, $location, $routeParams, $controller, $modal, Company, Market, Origin, Provider, ProviderOriginAssignment, Route, WorkOrder, preferences, companyPreference, websocket, flashService) ->
    $.extend this, $controller('IndexCtrl', { $scope: $scope })

    $scope.collectionClass = Route
    $scope.collectionName = 'routes'

    $scope.date = new Date()
    $scope.status = 'scheduled,loading,in_progress,unloading,pending_completion'

    companyId = companyPreference.get()
    if companyId
      company = Company.get id: companyPreference.get(), ->
        $scope.company = company

    $scope.market = null

    $scope.unresolvedWorkOrderStatuses = ['abandoned', 'awaiting_reschedule']
    $scope.completedWorkOrderStatuses  = ['completed']
    $scope.recalculatingRouteIds = []

    $scope.modalInstance = null

    $scope.showActivity = false
    $scope.showCompleted = false

    $scope.showScopeSpinnerActivity = true

    $scope.orderVolume = 0
    $scope.deliveryVolume = 0

    $scope.filter =
      status:
        scheduled: true
        loading: true
        in_progress: true
        unloading: true
        pending_completion: true

    for filter in ['filter.status.awaiting_schedule',
                   'filter.status.scheduled',
                   'filter.status.loading',
                   'filter.status.in_progress',
                   'filter.status.unloading',
                   'filter.status.pending_completion',
                   'filter.status.canceled',
                   'filter.status.completed']
      $scope.$watch filter, (newValue, oldValue) ->
        $scope.refreshRoutes() if newValue != oldValue

    for filter in ['filter.onOrAfter',
                   'filter.onOrBefore']
      $scope.$watch filter, (newValue, oldValue) ->
        $scope.refreshRoutes() if newValue != oldValue

    $scope.queryParams = ->
      statusFilters = []
      for key, value of $scope.filter.status
        statusFilters.push(key) if value
        $scope.filter.status.scheduled = true if statusFilters.length == 0
      status = if statusFilters.length == 0 then null else statusFilters.join(',')

      params =
        include_checkin_coordinates: true
        include_dispatcher_origin_assignment: true
        include_provider_origin_assignment: true
        include_products: true
        include_work_orders: true
        status: status

      params.provider_origin_assignment_id = $scope.providerOriginAssignmentId if $scope.providerOriginAssignmentId
      if !params.provider_origin_assignment_id && $scope.providerOriginAssignments
        providerOriginAssignmentIds = []
        for providerOriginAssignment in $scope.providerOriginAssignments
          providerOriginAssignmentIds.push(providerOriginAssignment.id)
        params.provider_origin_assignment_id = providerOriginAssignmentIds.join('|')

      dateRange = $scope.getActiveDateRange()
      params.date_range = dateRange if dateRange
      params

    $scope.toggle = ($event, picker) ->
      isOpen = $scope[picker]
      $event.preventDefault()
      $event.stopPropagation()
      $scope.onOrAfterOpened = $scope.onOrBeforeOpened = false
      $scope[picker] = !isOpen

    $scope.getActiveDateRange = ->
      dateFormatter = $filter('date')
      filter = $scope.filter || {}
      filtersOnOrAfter = filter.onOrAfter != undefined  && filter.onOrAfter != null
      filtersOnOrBefore = filter.onOrBefore != undefined  && filter.onOrBefore != null
      return null if !filtersOnOrAfter && !filtersOnOrBefore
      onOrAfter = if filtersOnOrAfter then dateFormatter(filter.onOrAfter, 'yyyy-MM-dd') else ''
      onOrBefore = if filtersOnOrBefore then dateFormatter(filter.onOrBefore, 'yyyy-MM-dd') else ''
      onOrAfter + '..' + onOrBefore

    $scope.routeBadgeClassName = (route) ->
      className =
        awaiting_schedule: 'list-group-item-info'
        scheduled: 'list-group-item-success'
        loading: 'list-group-item-success'
        en_route: 'list-group-item-success'
        in_progress: 'list-group-item-success'
        unloading: 'list-group-item-success'
        pending_completion: 'list-group-item-warning'
        completed: 'list-group-item-success'
        canceled: 'list-group-item-warning'
      className[route.status] if route

    $scope.recalculateRouteIconClassName = (route) ->
      className = 'fa fa-refresh'
      className += ' fa-spin' if $scope.recalculatingRouteIds.indexOf(route.id) != -1
      className

    $scope.openDatePicker = (key, event) ->
      event.preventDefault()
      event.stopPropagation()
      $scope[key] = true

    $scope.$watch 'date', ->
      $scope.refreshProviderOriginAssignments() if $scope.date

    $scope.$watch 'marketId', ->
      return unless $scope.marketId
      for market in $scope.markets
        $scope.market = market if market.id == $scope.marketId
      $scope.refreshOrigins()

    $scope.$watch 'originId', (newValue, oldValue) ->
      $scope.refreshProviderOriginAssignments()

    $scope.$watch 'providerOriginAssignments', (newValue, oldValue) ->
      $scope.refreshRoutes() if newValue

    $scope.$watch 'providerOriginAssignmentId', (newValue, oldValue) ->
      $scope.refreshRoutes() if newValue

    $scope.$on 'route_changed', (event, route) ->
      $scope.mergeRoute(new Route(route))

    $scope.refreshMarkets = ->
      $scope.showActivity = true
      $scope.markets = Market.query company_id: companyPreference.get()
      $scope.markets.$promise.then ->
        $scope.showActivity = false
        if $scope.markets.length == 1
          $scope.marketId = $scope.markets[0].id

    $scope.refreshOrigins = ->
      return unless $scope.marketId
      $scope.showActivity = true
      $scope.origins = Origin.query market_id: $scope.marketId
      $scope.origins.$promise.then ->
        $scope.showActivity = false
        if $scope.origins.length == 1
          $scope.originId = $scope.origins[0].id

    $scope.refreshProviderOriginAssignments = ->
      return unless $scope.marketId && $scope.originId && $scope.date
      $scope.showActivity = true
      $scope.routes = []
      $scope.routeId = null
      $scope.providerOriginAssignmentId = null
      providerOriginAssignments = ProviderOriginAssignment.query market_id: $scope.marketId, origin_id: $scope.originId, start_date: $scope.date.toISODateString(), unscoped: true
      providerOriginAssignments.$promise.then ->
        $scope.providerOriginAssignments = providerOriginAssignments
        $scope.showActivity = false

    $scope.revealProviderOriginAssignmentOptions = ->
      event = document.createEvent('MouseEvents')
      event.initMouseEvent('mousedown', true, true, window)
      angular.element('select.provider-origin-assignment-select')[0].dispatchEvent(event);

    $scope.refreshRoutes = ->
      return unless $scope.marketId
      $scope.routes = []
      $scope.showActivity = true

      params = $scope.queryParams()
      params.page = $scope.page
      params.rpp = $scope.rpp

      response = $scope.collectionClass.paginate(params)
      if response && response.$promise
        response.$promise.then ->
          $scope[$scope.collectionName] = response.results if $scope.collectionName
          $scope.totalItems = response.totalResults
          $scope.showActivity = false

          $scope.scheduledStartAt = $scope.routes[0].scheduled_start_at if $scope.routes && $scope.routes.length > 0
          orderVolume = 0
          deliveryVolume = 0
          for route in $scope.routes
              orderVolume += if route.items_ordered then route.items_ordered.length else 0
              for workOrder in route.work_orders
                  deliveryVolume += workOrder.items_delivered.length
          $scope.orderVolume = orderVolume
          $scope.deliveryVolume = deliveryVolume

    $scope.refreshMarkets() if companyPreference.get()

    $scope.mergeRoute = (route) ->
      index = -1
      for r in $scope.routes
        index++
        if r.id == route.id
          break
      $scope.routes[index] = route if index != -1
      $scope.$apply() unless $scope.$$phase
      $scope.$broadcast('updateRoute' + route.id, route)

    $scope.recalculateRoute = (route, event) ->
      event.preventDefault()
      event.stopPropagation()

      route = new Route(route)
      $scope.recalculatingRouteIds.push(route.id)
      route.recalculate = true
      route.$update().then ->
        index = $scope.recalculatingRouteIds.indexOf(route.id)
        $scope.recalculatingRouteIds.splice(index, 1)

    $scope.viewRoute = (route) ->
      $location.path('/routes/' + route.id)

    $scope.openManifest = (route, event) ->
      event.preventDefault()
      event.stopPropagation()

      route = new Route(route)
      $scope.modalInstance = $modal.open
        templateUrl: '<%= asset_path('routes/manifest.html') %>'
        controller: 'RouteManifestModalCtrl'
        size: 'lg'
        resolve:
          route: -> route
          workOrder: -> null

    $scope.completeRoute = (route, event) ->
      event.preventDefault()
      event.stopPropagation()

      route = new Route(route)
      route.status = 'completed'
      route.$update().then ->
        $scope.mergeRoute(route)
]
